{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-03-25T01:00:18.331403+00:00",
  "repo": "lamps-wg/cms-ml-dsa",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDONFRYgM6brDDb",
      "title": "Specify SHA2 as the hash function rather than SHAKE",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/1",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/aWaBnRcrYGlDHTxqj9u72QEPm-E/\r\n\r\nIf we keep actual digestAlgorithms (not id-digest-none) for non-SignedAttributes, add similar text as RFC 8419 to make it explicit that a prehash isn't generated. And in this case we set the digestAlgorithm as whatever digest is used internally to ML-DSA.\r\n\r\n```\r\nWhen signing with Ed448, the\r\ndigestAlgorithm MUST be id-shake256, and the algorithm parameters\r\nfield MUST be absent.\r\n\r\n  NOTE: Either id-sha512 or id-shake256 is used as part to the\r\n  private key signing operation.  However, the private key signing\r\n  operation does not take a message digest computed with one of\r\n  these algorithms as an input.\r\n```",
      "createdAt": "2024-10-24T14:18:49Z",
      "updatedAt": "2024-11-12T14:32:36Z",
      "closedAt": "2024-11-12T14:32:35Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Something like id-digest-none (id-hashIdentity) was proposed for draft-ietf-curdle-cms-eddsa-signatures (RFC 8419).  There wasn't much discussion, the decision was to avoid the extra identifier: https://mailarchive.ietf.org/arch/msg/curdle/HG4ED83kc2mf9n4j-O_zL3PGGKg/\r\n\r\n",
          "createdAt": "2024-10-28T15:03:54Z",
          "updatedAt": "2024-10-28T15:03:54Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "For ML-DSA-44 we've also got a choice of whether to specify SHA-512 or SHA-256. [FIPS 204](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.204.pdf) describes SHA256 and SHA512 as examples of valid pre-hash algorithms (as well as SHAKE128), but the [NIST OID assignments for pre-hash ML-DSA](https://csrc.nist.gov/projects/computer-security-objects-register/algorithm-registration) only include SHA512, which would imply a preference on NIST's part for SHA512 as a pre-hash algorithm for all ML-DSA variants.",
          "createdAt": "2024-11-04T16:58:18Z",
          "updatedAt": "2024-11-04T16:58:18Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "My question to the list, linked in the issue description, asked if we should just use SHA512.  The only response to this was from Deirde in favour of that: https://mailarchive.ietf.org/arch/msg/spasm/tFMKlZMjDI9npKugf6_Mg23_01o/\r\nSo let's do that.",
          "createdAt": "2024-11-08T13:56:36Z",
          "updatedAt": "2024-11-08T13:56:36Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDONFRYgM6brDY_",
      "title": "To use context string or not to use context string?",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/2",
      "state": "OPEN",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/aWaBnRcrYGlDHTxqj9u72QEPm-E/",
      "createdAt": "2024-10-24T14:19:24Z",
      "updatedAt": "2024-10-24T14:19:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDONFRYgM6brDqu",
      "title": "Update FIPS 204 reference to DOI.10.6028/NIST.FIPS.204",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/3",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update FIPS 204 reference to DOI.10.6028/NIST.FIPS.204",
      "createdAt": "2024-10-24T14:19:51Z",
      "updatedAt": "2024-11-14T23:22:37Z",
      "closedAt": "2024-11-14T23:22:37Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with #6 ",
          "createdAt": "2024-11-14T23:22:37Z",
          "updatedAt": "2024-11-14T23:22:37Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDONFRYgM6brD7N",
      "title": "Should the digest algorithms be bumped from RECOMMENDED to REQUIRED?",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/4",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danvangeest"
      ],
      "labels": [],
      "body": "Should the digest algorithms be bumped from RECOMMENDED to REQUIRED? This guarantees a minimum level of interoperability.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/yM8kS1kCoizWCMjS8pdcV3IFaDg/",
      "createdAt": "2024-10-24T14:20:17Z",
      "updatedAt": "2024-11-14T23:23:11Z",
      "closedAt": "2024-11-14T23:23:11Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "This is the text from draft-ietf-lamps-cms-sphincs-plus, do something similar.\r\n\r\n>The digestAlgorithm MUST identify a one-way hash function.  To\r\nensure collision resistance, the identified hash function SHOULD\r\nproduce a hash value that is at least twice the size of the hash\r\nfunction used in the SLH-DSA tree.  The hash functions defined in\r\n[FIPS180] and [FIPS202] MUST be supported for use with the\r\nvariants of SLH-DSA as shown below; however, other hash functions\r\nMAY also be supported:",
          "createdAt": "2024-11-08T13:05:53Z",
          "updatedAt": "2024-11-08T13:05:53Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDONFRYgM6brFUq",
      "title": "Can we address UEF-CMA issues?",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/5",
      "state": "OPEN",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See whole thread: https://mailarchive.ietf.org/arch/msg/spasm/yM8kS1kCoizWCMjS8pdcV3IFaDg/ and https://mailarchive.ietf.org/arch/msg/spasm/uAwmfFDCP2gAggqYSu4ykRCk4mU/\r\n\r\nPossible solutions:\r\n\r\n- (pure) ML-DSA for SignedArtifacts, HashML-DSA for non-signed artifacts.\r\n- Use context string, \"CMW-with-SignedAttributes\" and \"CMS-without-SignedAttributes\" (see also #2 ).\r\n- ML-DSA MUST be used with SignedAttributes.",
      "createdAt": "2024-10-24T14:22:36Z",
      "updatedAt": "2024-11-14T13:32:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed in https://github.com/lamps-wg/cms-ml-dsa/pull/6#discussion_r1838288342, if we don't address the issue directly in the draft (as is looking likely), it could be mentioned in the Security Considerations alongside any interim mitigations prior to the issue being addressed for CMS more generally.",
          "createdAt": "2024-11-14T13:32:11Z",
          "updatedAt": "2024-11-14T13:32:11Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDONFRYgM6eGwvw",
      "title": "SHA-512 reference",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/8",
      "state": "CLOSED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 8017 is used as a reference for SHA-512 as a message digest algorithm - I'd have expected RFC 5754.",
      "createdAt": "2024-11-12T15:41:15Z",
      "updatedAt": "2024-11-14T23:24:18Z",
      "closedAt": "2024-11-14T23:24:18Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a good point.  This came from text copied from the cms-sphincs-plus draft.  I can update our draft.  Would you like to bring this up on the list and/or direct to Russ for cms-sphincs-plus?  If not, I can.",
          "createdAt": "2024-11-12T16:22:42Z",
          "updatedAt": "2024-11-12T16:22:42Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "On the other hand, RFC 8017 is the update of RFC 3447 which brought id-sha512 into the IETF, so maybe RFC 8017 is appropriate.  RFC 5754 brought it into CMS though.",
          "createdAt": "2024-11-12T16:38:31Z",
          "updatedAt": "2024-11-12T16:38:31Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems a bit trivial for the list so long as cms-sphincs-plus and this draft are aligned - I'll email Russ directly. ",
          "createdAt": "2024-11-14T12:59:51Z",
          "updatedAt": "2024-11-14T12:59:51Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with a commit fa06e8",
          "createdAt": "2024-11-14T23:24:18Z",
          "updatedAt": "2024-11-14T23:24:18Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDONFRYgM6fshNw",
      "title": "Size constraints for ML-DSA-PublicKey and ML-DSA-PrivateKey",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/10",
      "state": "CLOSED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See this thread:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/2ptHLgPTksX7CNNNQr21pxO-zw8/\r\n\r\n`ML-DSA-PublicKey ::= OCTET STRING` would become `ML-DSA-PublicKey ::= OCTET STRING (SIZE (1312..2592))`, assuming I've read FIPS 204 right.\r\n\r\n`ML-DSA-PrivateKey ::= OCTET STRING` would become `ML-DSA-PrivateKey ::= OCTET STRING (SIZE (32))`, assuming we're only supporting seeds as private keys.",
      "createdAt": "2024-11-21T12:08:26Z",
      "updatedAt": "2024-11-22T09:46:25Z",
      "closedAt": "2024-11-22T09:46:25Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDONFRYgM6fslQN",
      "title": "Other security considerations",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/11",
      "state": "CLOSED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-lamps-dilithium-certificates takes care of much of this for us - is there anything else that needs adding?\r\n\r\nSome suggestions:\r\n\r\n- Implementations need to use a decent PRNG for key generation and rnd (if using hedged signatures).\r\n- Some other drafts discuss protection against fault attacks - FIPS 204 calls out hedged signatures as a particular defence against this.",
      "createdAt": "2024-11-21T12:15:39Z",
      "updatedAt": "2024-11-21T23:26:45Z",
      "closedAt": "2024-11-21T23:26:45Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDONFRYgM6fsp3U",
      "title": "Example encodings",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/12",
      "state": "CLOSED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-lamps-dilithium-certificates has example private keys and public keys. It also has a TODO for example certificates.\r\n\r\nWe could add example signed-data encodings. That being said, RFC 8419, draft-ietf-lamps-cms-sphincs-plus and even RFC 5652 don't have any, so it doesn't need to hold the draft back.\r\n\r\nIf we do include them, it would make sense to include signed attribute and non-signed attribute cases, and to show all three ML-DSA parameter sets. Re-using the keys and (eventually) certificates from draft-ietf-lamps-dilithium-certificates might be sensible too, if possible.",
      "createdAt": "2024-11-21T12:23:59Z",
      "updatedAt": "2025-01-15T18:23:12Z",
      "closedAt": "2025-01-15T18:23:12Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #15 ",
          "createdAt": "2025-01-15T18:23:12Z",
          "updatedAt": "2025-01-15T18:23:12Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDONFRYgM6mRaz1",
      "title": "Support for full private keys",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/17",
      "state": "CLOSED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The need to support full private keys (versus seeds only) for use with HSMs has come up in WGLC for other PQC LAMPS drafts. We're almost immune to that discussion as the primary private key format is described in the ML-DSA X.509 draft, but we do include a definition for ML-DSA-PrivateKey that's restricted to 32 bytes.\r\n\r\nIf the ML-DSA X.509 draft adopts a choice of two key formats, ML-DSA-PrivateKey should follow suit. Either way, there's no explanation that the 32 byte restriction corresponds to a seed, which perhaps might not be immediately obvious, so a brief explanation might help there.\r\n\r\nRelevant threads:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/QRvuqH2uLCgWLthF3JUC1C8eAUE/\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/JRUQk0m0MtEr3YwFpcxD6PiwMLE/",
      "createdAt": "2025-01-15T11:45:08Z",
      "updatedAt": "2025-02-27T13:58:10Z",
      "closedAt": "2025-02-27T13:58:09Z",
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be happy if the majority of our ASN.1 was moved over to the certs draft so we can sidestep the issue entirely.  That would also avoid us needing to add any seed explanation.\r\n\r\nI'll send an email to both sets of authors before making a WGLC comment on it for the certs draft.",
          "createdAt": "2025-01-15T12:49:09Z",
          "updatedAt": "2025-01-15T12:49:09Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that makes sense, the split does feel a little odd. The private key format is even arguably a CMS thing given the RFC it refers to a CMS RFC, but practically speaking the number of X.509 implementations using those formats is going to be much greater than the set of CMS implementations using them.",
          "createdAt": "2025-01-15T13:00:34Z",
          "updatedAt": "2025-01-15T13:00:34Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think that makes sense, the split does feel a little odd. The private key format is even arguably a CMS thing given the RFC it refers to a CMS RFC, but practically speaking the number of X.509 implementations using those formats is going to be much greater than the set of CMS implementations using them.\r\n\r\nCan you expand on \"the RFC it refers to a CMS RFC\"?  Which RFC are you/it referring to?",
          "createdAt": "2025-01-15T13:07:32Z",
          "updatedAt": "2025-01-15T13:07:32Z"
        },
        {
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy for everything to be moved over to the certs draft - having all of the ASN.1 everything in one place that we can just point to makes sense.\r\n\r\nEqually, I'd be happy for consensus during WGLC to make the decision for us.",
          "createdAt": "2025-01-15T13:25:01Z",
          "updatedAt": "2025-01-15T13:25:01Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "> > I think that makes sense, the split does feel a little odd. The private key format is even arguably a CMS thing given the RFC it refers to a CMS RFC, but practically speaking the number of X.509 implementations using those formats is going to be much greater than the set of CMS implementations using them.\r\n> \r\n> Can you expand on \"the RFC it refers to a CMS RFC\"? Which RFC are you/it referring to?\r\n\r\nRFC 5958 - the document's titled \"Asymmetric Key Packages\" (as opposed to \"Asymmetric Key Formats\") and it describes how to encrypt/sign/etc private keys in CMS, so I've always seen it as a CMS RFC. But it doesn't describe the core private key format as being part of CMS and that format's derived from PKCS#8 (rather than PKCS#7), so I think my perception is based on biases from my personal experiences, rather than a reflection of reality! \ud83d\ude42\r\n\r\nEither way, I agree that the X.509 draft is the right place if everyone's amenable to that.",
          "createdAt": "2025-01-15T13:41:06Z",
          "updatedAt": "2025-01-15T13:41:06Z"
        },
        {
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we want to resolve this before going to WGLC ourselves, or should we publish as-is and let it all be sorted out as part of the WGLC process? Alternatively I can ask Russ what his preferred approach is.",
          "createdAt": "2025-01-16T10:37:56Z",
          "updatedAt": "2025-01-16T10:37:56Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we want to resolve this before going to WGLC ourselves, or should we publish as-is and let it all be sorted out as part of the WGLC process? Alternatively I can ask Russ what his preferred approach is.\n\nYou could reply to Russ' thread to us authors saying we're working with the dilithium-certs authors to move the ASN.1 and key encoding text to the dilithium-certs draft for the reasons I posted to LAMPS.  There are PRs for the changes already.  Then ask him if he wants to wait for those PRs, or start the WGLC knowing both drafts should be updated shortly.",
          "createdAt": "2025-01-16T10:45:23Z",
          "updatedAt": "2025-01-16T10:45:23Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Private key format has been moved over to dilithium-certs, so I think this can be closed.",
          "createdAt": "2025-02-27T13:58:09Z",
          "updatedAt": "2025-02-27T13:58:09Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDONFRYgM6oKvMf",
      "title": "Add \"SHOULD\" for SHAKE256 digests",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/issues/21",
      "state": "OPEN",
      "author": "csosto-pk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi folks,\n\nThe draft currently calls out SHA-512 as a \"MUST\" for a digest. And it says \"MAY\" for others. \n\n> SHA-512 [[FIPS180](https://doi.org/10.6028/nist.fips.180)] MUST be supported for use with the variants of ML-DSA in this document; however, other hash functions MAY also be supported.\n\nI suggest to call out SHAKE256 as a \"SHOULD\". SHAKE256 is used in ML-DSA so it makes sense for platforms that may not want to have SHA2. \n\nI understand that SHA2 is prevalent, so we don't want to make SHAKE256 a \"MUST\", but I suggest to also call it out as a \n\n> [...] SHOULD for use-cases that may want to use the same XOF as ML-DSA for code economy \n\nor something like that. \n\nThx. ",
      "createdAt": "2025-01-30T17:16:08Z",
      "updatedAt": "2025-02-27T14:59:54Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Honzaik",
          "authorAssociation": "NONE",
          "body": "Hi,\n\nI agree with @csosto-pk. Let me say that I am fairly new to this stuff so I might have misunderstood something, but I see an inconsistency in relation to existing standards. \n\nFrom what I understand, in cases where there is no signedAttributes, i.e., it is a \"direct signature\", the digestAlgorithm field serves no purpose as all modern signature OIDs specify the internal hashing algorithm already (\"id-ecdsa-with-sha3-512\", \"ecdsa-with-SHA256\"). The convention seems to be to set digestAlgorithm based on the signatureAlgorithm. \n\nThe EdDSA CMS RFC 8419 (https://datatracker.ietf.org/doc/rfc8419/) seems to also adhere to this convention where in cases where there is no signedAttributes. Specifically, for Ed448, which also internally uses SHAKE256 like ML-DSA, the digestAlgorithm must be \"id-shake256\". (I am still a bit puzzled why it is not \"id-shake256-len\".). The RFC also states that when signedAttributes are used, the digestAlgorithm must be \"id-shake256-len\" (with 512-bit parameter). \n\nSimilarly, the SHAKE ECDSA RFC 8702 (https://datatracker.ietf.org/doc/rfc8702/) states \"The digest algorithm MUST be the same as the message hash algorithms used in signatures.\" which I understand means that if signedAttributes are used, the only possible digestAlgorithm (to compute the message-digest) is \"id-shake256\" (implictly assuming 512-bit output) if the signatureAlgorithm is \"id-ecdsa-with-shake256\". \n\nI don't really understand the reasons why \"id-shake256\" is used sometimes instead of the \"id-shake256-len\" which explicitly defines a hash function (whereas \"id-shake256\" is technically an XOF). I see that @csosto-pk is one of the authors so I'd be happy to learn why that is (I tried to look into the archives but I haven't found a clear answer). \n\nBased on these existing examples of \"signatures that internally use SHAKE just like ML-DSA\" the convention seems to be to specify SHAKE256 as the digestAlgorithm if signedAttributes are not present. Therefore, it would make sense to me to use \"id-shake256-len\" in cases where no signedAttributes are present (or \"id-shake256\" depending on the reasons not to use the length-specific identifier). Additionally, it would make even more sense to also explicitly mention SHAKE256 as an option since it is the internal hash in ML-DSA.\n\n//edit, added this\nI also found https://github.com/openssl/openssl/issues/11413#issuecomment-604492113 where Russ Housley explains why the digestAlgorithm is separate: due to stream processing. However, this doesn't seem useful for (non-pre-hash) ML-DSA (just like Ed448) as the internal hash is prefixed by some algorithm specific data, so the processor cannot begin calculating the hash before encountering signatureAlgorithm. It seems the digestAlgorithm field is sort of in an awkward spot where for older algorithms it reflects the internal hash, but newer algorithms do not use a simple H(msg) hash so it being separate from signatureAlgorithm is useless. Nonetheless, it seems to me if anything, it should say SHAKE256 (and not SHA512).\n\nI am honestly more confused the more I read into this (https://github.com/openssl/openssl/issues/9392). It seems like the message-digest value must be computed using the same digest algorithm that the signature uses (according to 11.2 in RFC 5652) i.e. the one indicated in digestAlgorithm, therefore there is just no way to use SHA512 with non-pre-hash ML-DSA. Am I missing something?",
          "createdAt": "2025-02-18T17:43:32Z",
          "updatedAt": "2025-02-19T14:01:30Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @csosto-pk,\n\n> Hi folks,\n> \n> The draft currently calls out SHA-512 as a \"MUST\" for a digest. And it says \"MAY\" for others.\n> \n> > SHA-512 [[FIPS180](https://doi.org/10.6028/nist.fips.180)] MUST be supported for use with the variants of ML-DSA in this document; however, other hash functions MAY also be supported.\n> \n> I suggest to call out SHAKE256 as a \"SHOULD\". SHAKE256 is used in ML-DSA so it makes sense for platforms that may not want to have SHA2.\n> \n> I understand that SHA2 is prevalent, so we don't want to make SHAKE256 a \"MUST\", but I suggest to also call it out as a\n> \n> > [...] SHOULD for use-cases that may want to use the same XOF as ML-DSA for code economy\n> \n> or something like that.\n> \n> Thx.\n\nI can see use-cases that want to use only SHAKE256 for code economy, but doesn't the MUST for SHA-512 require them to have the SHA-512 code anyways?  I suppose there could be a differentiation for senders and receivers, where a sender might not need to implement SHA-512 if it knows the receiver supports SHAKE256, but a receiver should implement both.",
          "createdAt": "2025-02-27T14:08:46Z",
          "updatedAt": "2025-02-27T14:08:46Z"
        },
        {
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @Honzaik \n\nI agree that this whole situation is a bit messy and having SHAKE would seem the more sensible decision. The current state of things has arisen out of discussions on backwards compatibility in LAMPS. In short, it was believed that there would be CMS implementations that could have an ML-DSA implementation added to them (and hence would have access to SHAKE at the crypto primitive layer), but wouldn't have access to SHAKE/SHA-3 at the CMS layer (instead only having access to SHA-2). [See here for a comment to that effect](https://mailarchive.ietf.org/arch/msg/spasm/XXnmi3Z8CMCPy1M5CNFU2kMFFZ8/), though the discussions go back earlier.\n\nIn order to make it as easy as possible for these implementations to adopt PQC and use this draft, this is the slightly odd compromise we've ended up with.\n\nIn the case of signing without signed attributes, as noted the digest algorithm field doesn't actually do anything. However, if we included the SHAKE OID, that might cause these old CMS implementations to stumble, hence we're using the SHA-512 OID instead. It probably also makes sense to be consistent and use the same OID in both cases (with and without signed attributes). This is indeed inconsistent with what's been done in the past, but I believe the current view of the WG that it's a pain worth dealing with to maximise compatibility.\n\nIf you're not convinced these old implementations exist, or that they're not worth supporting, that's worth raising on the LAMPS mailing list.\n\nWe could add SHAKE as a SHOULD or a MAY, though conformant implementations would still need to support SHA-512. Of course, you're welcome to write a non-conformant implementation that just implements SHAKE \ud83d\ude09.",
          "createdAt": "2025-02-27T14:58:38Z",
          "updatedAt": "2025-02-27T14:59:54Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "PR_kwDONFRYgM6AP3KA",
      "title": "Mostly public key encoding stuff, plus some cleanup.",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/6",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-29T13:53:18Z",
      "updatedAt": "2024-11-14T15:37:45Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "6955afcfb0299ba70ff1288f09296c31142b1ad9",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/my_original_review",
      "headRefOid": "19671f4a4d984dce2511d2fdd2555772576fac53",
      "closedAt": "2024-11-14T15:35:07Z",
      "mergedAt": "2024-11-14T15:35:06Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "36e356be24c1592f102c6c72ee956e1df31f7c86"
      },
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Requesting approval so I can merge, if there are no other comments and I didn't miss anything.",
          "createdAt": "2024-11-14T13:45:22Z",
          "updatedAt": "2024-11-14T13:45:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6Qkb_z",
          "commit": {
            "abbreviatedOid": "73d0089"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Comments for other reviewers.",
          "createdAt": "2024-11-09T16:13:10Z",
          "updatedAt": "2024-11-09T16:16:14Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "ietf-lamps-dilithium-certificates refers to use for public key encoding and ANS.1, so I added more text.",
              "createdAt": "2024-11-09T16:13:11Z",
              "updatedAt": "2024-11-09T16:16:14Z"
            },
            {
              "originalPosition": 128,
              "body": "I removed this line because it's not in the other PQ documents, and if it's ever added in the future this makes that easier maybe?",
              "createdAt": "2024-11-09T16:14:15Z",
              "updatedAt": "2024-11-09T16:16:14Z"
            },
            {
              "originalPosition": 137,
              "body": "I think no, at least to align with cms-sphincs-plus. The CMS-EUF-CMA work can address this.  If that determines we need more text here and in cms-sphincs-plus we can do that then.",
              "createdAt": "2024-11-09T16:15:40Z",
              "updatedAt": "2024-11-09T16:16:14Z"
            },
            {
              "originalPosition": 148,
              "body": "see previous comment",
              "createdAt": "2024-11-09T16:15:50Z",
              "updatedAt": "2024-11-09T16:16:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6QyKWs",
          "commit": {
            "abbreviatedOid": "73d0089"
          },
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T09:39:10Z",
          "updatedAt": "2024-11-12T09:56:13Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "IIRC idnits has previously complained when we included a reference in the abstract, although I note that it isn't complaining currently. Not sure what's different in this case",
              "createdAt": "2024-11-12T09:39:10Z",
              "updatedAt": "2024-11-12T09:56:13Z"
            },
            {
              "originalPosition": 41,
              "body": "s/keys sizes/key sizes/",
              "createdAt": "2024-11-12T09:40:34Z",
              "updatedAt": "2024-11-12T09:56:13Z"
            },
            {
              "originalPosition": 137,
              "body": "I know the WG wanted a quick turnaround on this draft - are we expecting it to wait on the CMS-EUF-CMA work (the interim for which will likely be in the new year)?",
              "createdAt": "2024-11-12T09:55:55Z",
              "updatedAt": "2024-11-12T09:56:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6Q0trj",
          "commit": {
            "abbreviatedOid": "73d0089"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T14:19:33Z",
          "updatedAt": "2024-11-12T14:19:33Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "I will post a summary of the EUF-CMA mitigations to the list since the presentation was cut short.  Hopefully responses to that will give an indication of where the WG wants to go from there.\r\n\r\ncms-sphincs-plus has gone through WGLC, so I don't think the EUF-CMA stuff would prevent this draft from doing the same.  If the WG determines that the EUF-CMA issue needs to be solved immediately, both drafts would need to be updated.  But there is a more general EUF-CMA solution that also allows these drafts to proceed now.",
              "createdAt": "2024-11-12T14:19:33Z",
              "updatedAt": "2024-11-12T14:19:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6Q0zCd",
          "commit": {
            "abbreviatedOid": "73d0089"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T14:26:59Z",
          "updatedAt": "2024-11-12T14:26:59Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "https://ietf.github.io/id-guidelines/ still says to avoid citations in the abstract so I'll remove it.",
              "createdAt": "2024-11-12T14:26:59Z",
              "updatedAt": "2024-11-12T14:26:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6Q1XM8",
          "commit": {
            "abbreviatedOid": "c827c12"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T15:18:05Z",
          "updatedAt": "2024-11-12T15:31:05Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "Makes sense to me. There are mitigations that can be applied in the interim for the EUF-CMA issue (e.g. only accepting one of signed attributes/no signed attributes, not both), so it's not like implementers have no options if they're worried about it prior to a separate RFC addressing the problem.\r\n\r\nI'm happy with the text you've suggested - it could be worth noting the issue in the Security Considerations perhaps, and that future CMS RFCs may address this. On the other hand, I guess it's not an issue that's specific to ML-DSA.\r\n",
              "createdAt": "2024-11-12T15:18:05Z",
              "updatedAt": "2024-11-12T15:31:05Z"
            },
            {
              "originalPosition": 107,
              "body": "\"octet string\" versus \"OCTET STRING\" might be a bit confusing - FIPS 204 describes the output of Algorithm 22 as a byte string, so that could be an alternative. Alternatively, something like \"the subjectPublicKey BIT STRING contains the raw octet string encoding of the public key, i.e. without any additional ASN.1 wrapping\". I do think it makes sense as currently written, it just took me a second read to check that the lack of capital letters was deliberate.",
              "createdAt": "2024-11-12T15:25:11Z",
              "updatedAt": "2024-11-12T15:31:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6Q1zgy",
          "commit": {
            "abbreviatedOid": "56de0a0"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T15:59:50Z",
          "updatedAt": "2024-11-12T16:00:07Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nAlgorithm 22 in Section 7.2 of {{FIPS204}} defines the raw byte string encoding of an ML-DSA public key.\r\n```",
              "createdAt": "2024-11-12T15:59:51Z",
              "updatedAt": "2024-11-12T16:00:07Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nWhen used in a SubjectPublicKeyInfo type, the subjectPublicKey BIT STRING contains the raw byte string encoding of the public key.\r\n```",
              "createdAt": "2024-11-12T16:00:01Z",
              "updatedAt": "2024-11-12T16:00:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6RNGzZ",
          "commit": {
            "abbreviatedOid": "19671f4"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-14T13:46:59Z",
          "updatedAt": "2024-11-14T13:46:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDONFRYgM6BZZnL",
      "title": "Digest algorithm cleanup",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/7",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #1 and #4.",
      "createdAt": "2024-11-09T13:02:14Z",
      "updatedAt": "2024-11-14T13:37:32Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "a4d5d77f754b7d2ada8d517967268ad5694f90fa",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/digest_alg_text",
      "headRefOid": "4aeff6c633b08cb69b112aec23fff2995714f53e",
      "closedAt": "2024-11-12T14:32:34Z",
      "mergedAt": "2024-11-12T14:32:34Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "6955afcfb0299ba70ff1288f09296c31142b1ad9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6Qyd43",
          "commit": {
            "abbreviatedOid": "4aeff6c"
          },
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T10:10:54Z",
          "updatedAt": "2024-11-12T10:10:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDONFRYgM6CptkT",
      "title": "Adam's comments",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/9",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-21T11:11:07Z",
      "updatedAt": "2024-11-21T15:30:45Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "fa06e80b47f1d4785d42066bdd4cefccff435b0b",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/adams_comments",
      "headRefOid": "533b24056ff4261b25b1705d39ff0639e4b7cddc",
      "closedAt": "2024-11-21T13:59:47Z",
      "mergedAt": "2024-11-21T13:59:47Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "e5f708e8b91b4eec996a6ca46e09e92e7a9516f7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6SGTSE",
          "commit": {
            "abbreviatedOid": "ac5abda"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I suggested some extra text for the digestAlgorithm bit, but the rest of the changes all look good to me.",
          "createdAt": "2024-11-21T11:43:36Z",
          "updatedAt": "2024-11-21T11:46:51Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nSHA-512 {{FIPS180}} MUST be supported for use with the variants of SLH-DSA in this document; however, other hash functions MAY also be supported.  When SHA-512 is used, the id-sha512 {{!RFC5754}} digest algorithm identifier is used and the parameters field MUST be omitted. When signing using ML-DSA without including signed attributes, the algorithm specified in the digestAlgorithm field has no meaning, as ML-DSA computes signatures over entire messages rather than externally computed digests. Nonetheless, it SHOULD specify a digest algorithm that otherwise would have been used if signed attributes were present, such as SHA-512. When processing a SignerInfo signed using ML-DSA, if no signed attributes are present, implementatons MUST ignore the content of the digestAlgorithm field.\r\n```",
              "createdAt": "2024-11-21T11:43:36Z",
              "updatedAt": "2024-11-21T11:46:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDONFRYgM6SGuvI",
          "commit": {
            "abbreviatedOid": "533b240"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-21T12:32:14Z",
          "updatedAt": "2024-11-21T12:32:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDONFRYgM6CsCU9",
      "title": "Add size parameters to ASN.1 public and private key OCTET STRINGs",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/13",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #10",
      "createdAt": "2024-11-21T15:30:27Z",
      "updatedAt": "2024-11-22T09:46:24Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "e5f708e8b91b4eec996a6ca46e09e92e7a9516f7",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/sized_asn1",
      "headRefOid": "e3a7c6b821ae1704b1c4f6320eba452358c23ddd",
      "closedAt": "2024-11-22T09:46:24Z",
      "mergedAt": "2024-11-22T09:46:24Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "75fd6c72552e8b0f261d626b670a6043808fb239"
      },
      "comments": [
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "In case you missed it, Russ suggested keeping a single type but adding a size range:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/2ptHLgPTksX7CNNNQr21pxO-zw8/\r\n\r\nLooks good if we're going for three separate public key types though.",
          "createdAt": "2024-11-21T17:59:33Z",
          "updatedAt": "2024-11-21T17:59:33Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "> In case you missed it, Russ suggested keeping a single type but adding a size range: https://mailarchive.ietf.org/arch/msg/spasm/2ptHLgPTksX7CNNNQr21pxO-zw8/\r\n> \r\n> Looks good if we're going for three separate public key types though.\r\n\r\nNever mind - I missed your message on the list about this! Looks like SIZE ( x | y | z ) is popular though.",
          "createdAt": "2024-11-21T20:23:46Z",
          "updatedAt": "2024-11-21T20:23:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6SQ2Y-",
          "commit": {
            "abbreviatedOid": "e3a7c6b"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T09:26:02Z",
          "updatedAt": "2024-11-22T09:26:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDONFRYgM6CtKQE",
      "title": "Security considerations and HSM streaming",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/14",
      "state": "MERGED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #11 ",
      "createdAt": "2024-11-21T17:53:04Z",
      "updatedAt": "2024-11-21T23:26:52Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "e5f708e8b91b4eec996a6ca46e09e92e7a9516f7",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "ar/security_considerations",
      "headRefOid": "78bbd1bd10ac8b820eeb3447e478e10f322071eb",
      "closedAt": "2024-11-21T23:12:25Z",
      "mergedAt": "2024-11-21T23:12:25Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "3355bc94145f95bb522ac6b1234a305036a74293"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6SNZcp",
          "commit": {
            "abbreviatedOid": "78bbd1b"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-21T23:11:48Z",
          "updatedAt": "2024-11-21T23:11:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDONFRYgM6HVDXr",
      "title": "Example encodings",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/15",
      "state": "MERGED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #12. I've tried to keep in line with draft-ietf-lamps-dilithium-certificates: I use the same private/public keys, the same issuer name/serial, and the format in the document should be the same as well.\r\n\r\nThe code I used to generate these could easily be adapted to EdDSA to check that I'm at least doing pure mode signatures right, but openSSL doesn't support it properly as best I can tell (see https://github.com/openssl/openssl/pull/22391 and a familiar name in the comments). GnuTLS claims to support it, and I think BouncyCastle might, but I'm not familiar enough with either of those to test quickly.",
      "createdAt": "2025-01-10T12:55:46Z",
      "updatedAt": "2025-01-15T18:27:02Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "8ebab1395f681f2eb36bc23dc9a647f2d794a994",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "ar/examples",
      "headRefOid": "4972bc3a7b8a2830a95fe0ab124128c1b74327d8",
      "closedAt": "2025-01-15T18:07:31Z",
      "mergedAt": "2025-01-15T18:07:31Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "b8ee705d2ecb81e2d15bb66a65d2015c388cb740"
      },
      "comments": [
        {
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "body": "We good to go on this one? Sounds like we have a successful interop",
          "createdAt": "2025-01-15T14:55:46Z",
          "updatedAt": "2025-01-15T14:55:46Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "I have successfully tested the signed-attributes version of the artifacts with a locally-modified OpenSSL (to fix support for pure signatures) and my own PQ OpenSSL provider.  I have not successfully tested the no-signed-attributes version of the artifacts, changing OpenSSL to support this would be a significant amount of work.\r\n\r\nI don't know how to address the no-signed-attributes attributes, either remove them or ask the WG if they can verify them.",
          "createdAt": "2025-01-15T15:09:10Z",
          "updatedAt": "2025-01-15T15:09:10Z"
        },
        {
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't know how to address the no-signed-attributes attributes, either remove them or ask the WG if they can verify them.\r\n\r\n@adam-r-ncsc, did you mention you did a sorta-interop for the unsigned attributes case (i.e. two independent implementations but forked from the same codebase so not totally independent)?\r\n\r\nAt any rate, seems to me like something that could be done as part of WGLC, assuming Russ is happy with that.",
          "createdAt": "2025-01-15T15:15:18Z",
          "updatedAt": "2025-01-15T15:15:18Z"
        },
        {
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure we had a good test for the no-signed-attributes case unfortunately, the internal testing we did focused on a signed data with signed attributes. We can try and go further, but ultimately it's still two NCSC-originated implementations, so not a great test.\r\n\r\nIt's not hugely difficult to see if the signature verifies given that it's only calculated over the message's content, but that doesn't cover whether the rest of the message is formatted correctly. I'd upload my code - its only dependency is Cloudflare's CIRCL library - but I'd need to go check whether I'm actually allowed to do that first, and either way that's still not an interoperability test.\r\n\r\nRemoving them probably makes sense if nobody can test them? Maybe we:\r\n1. Merge the PR\r\n2. Produce a new version of the document and explain to the list that we have some untested examples\r\n3. If no testing ends up happening, produce a PR to remove those examples\r\n",
          "createdAt": "2025-01-15T17:43:11Z",
          "updatedAt": "2025-01-15T17:43:11Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine with that proposal.  I'll have a short PR soon just adding an RFC editor note asking them to use the correct RFC number instead of dilithium-certificates.",
          "createdAt": "2025-01-15T18:07:01Z",
          "updatedAt": "2025-01-15T18:07:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6Xi2wJ",
          "commit": {
            "abbreviatedOid": "4972bc3"
          },
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Haven't checked the test vectors since I don't have an implementation to hand, but it all compiles and looks sensible \ud83d\udc4d",
          "createdAt": "2025-01-10T13:55:13Z",
          "updatedAt": "2025-01-10T13:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONFRYgM6YNAYh",
          "commit": {
            "abbreviatedOid": "4972bc3"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-15T18:07:18Z",
          "updatedAt": "2025-01-15T18:07:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDONFRYgM6H1Nxs",
      "title": "Fix SLH-DSA typo",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/16",
      "state": "MERGED",
      "author": "adam-r-ncsc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing a typo identified by Piotr Popis - \"SLH-DSA\" should be \"ML-DSA\".",
      "createdAt": "2025-01-15T11:02:00Z",
      "updatedAt": "2025-01-15T11:08:03Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "8ebab1395f681f2eb36bc23dc9a647f2d794a994",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "ar/correct_typo",
      "headRefOid": "ac73a0763641e09ba759eb4f40088699a3ae7ddb",
      "closedAt": "2025-01-15T11:06:45Z",
      "mergedAt": "2025-01-15T11:06:45Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "342f9d9d8d23b9873666c54dd0a3d2f4ad560f7a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6YIE93",
          "commit": {
            "abbreviatedOid": "ac73a07"
          },
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-15T11:06:32Z",
          "updatedAt": "2025-01-15T11:06:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDONFRYgM6H43Sm",
      "title": "Add editor note to replace draft names with RFCs",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/18",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-15T18:22:31Z",
      "updatedAt": "2025-01-15T18:49:36Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "b8ee705d2ecb81e2d15bb66a65d2015c388cb740",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/editor_note",
      "headRefOid": "b39e471660fa420269db9aabf432594b4ed5e561",
      "closedAt": "2025-01-15T18:49:36Z",
      "mergedAt": "2025-01-15T18:49:36Z",
      "mergedBy": "adam-r-ncsc",
      "mergeCommit": {
        "oid": "7082b020c2d0b48213fd0b9f794d74615700e3d8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6YNRF1",
          "commit": {
            "abbreviatedOid": "b39e471"
          },
          "author": "BenS-3",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-15T18:38:00Z",
          "updatedAt": "2025-01-15T18:38:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDONFRYgM6YNWXc",
          "commit": {
            "abbreviatedOid": "b39e471"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-15T18:49:27Z",
          "updatedAt": "2025-01-15T18:49:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDONFRYgM6H_I6M",
      "title": "Move ASN.1 and key encoding text over to dilithium-certificates draft",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/19",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-16T10:40:03Z",
      "updatedAt": "2025-01-17T08:12:52Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "7082b020c2d0b48213fd0b9f794d74615700e3d8",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/move_asn1_and_key_encoding_to_dilithium",
      "headRefOid": "573745f404c202365bdce298b726d8f7bb7f855e",
      "closedAt": "2025-01-17T08:12:52Z",
      "mergedAt": "2025-01-17T08:12:52Z",
      "mergedBy": "danvangeest",
      "mergeCommit": {
        "oid": "8e9a43317b414f6fc0b03e585033b1a1a41cbf5a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6YZuUo",
          "commit": {
            "abbreviatedOid": "573745f"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-16T18:07:43Z",
          "updatedAt": "2025-01-16T18:07:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDONFRYgM6IEZ0K",
      "title": "Remove no-signed-attrs examples",
      "url": "https://github.com/lamps-wg/cms-ml-dsa/pull/20",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-16T21:59:12Z",
      "updatedAt": "2025-01-16T22:06:51Z",
      "baseRepository": "lamps-wg/cms-ml-dsa",
      "baseRefName": "main",
      "baseRefOid": "7082b020c2d0b48213fd0b9f794d74615700e3d8",
      "headRepository": "lamps-wg/cms-ml-dsa",
      "headRefName": "dvg/remove_some_exampled",
      "headRefOid": "2afcafc66c6089627e0a1919757f5b417da9d6a3",
      "closedAt": "2025-01-16T22:06:51Z",
      "mergedAt": "2025-01-16T22:06:51Z",
      "mergedBy": "adam-r-ncsc",
      "mergeCommit": {
        "oid": "fa0a29c50eb28a8e9b32189c906fa4caca687bb6"
      },
      "comments": [
        {
          "author": "danvangeest",
          "authorAssociation": "COLLABORATOR",
          "body": "Russ said that three examples should be fine.",
          "createdAt": "2025-01-16T21:59:25Z",
          "updatedAt": "2025-01-16T21:59:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDONFRYgM6YcH0Z",
          "commit": {
            "abbreviatedOid": "2afcafc"
          },
          "author": "adam-r-ncsc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-16T22:06:34Z",
          "updatedAt": "2025-01-16T22:06:34Z",
          "comments": []
        }
      ]
    }
  ]
}